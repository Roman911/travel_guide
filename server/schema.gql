# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Socials {
  facebook: String
  instagram: String
  twitter: String
  youtube: String
  telegram: String
}

type CreateUserDto {
  _id: String!
  name: String!
  email: String!
  password: String!
  isActivated: Boolean!
  activationLink: String!
  avatar: String
  avatars: [String!]
  rating: Int
  aboutMy: String
  socials: Socials
  last_seen: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CreateUserDataDto {
  user: CreateUserDto!
  accessToken: String!
  refreshToken: String!
}

type Answer {
  _id: ID!
  comment: String
  rating: Int!
  createdAt: DateTime
  author: CreateUserDto
}

type CreateCommentDto {
  _id: ID!
  postId: String!
  comment: String!
  answers: [Answer!]!
  rating: Int!
  last_seen: DateTime
  createdAt: DateTime!
  author: CreateUserDto
}

type CreateLocationDto {
  _id: String!
  linkToPost: String
  title: String!
  small_text: String!
  cover: String!
  isType: String!
  address: String!
  region: String!
  isTicket: Boolean
  tickets: [String!]
  createdAt: DateTime!
  author: CreateUserDto
  latitude: Float!
  longitude: Float!
}

type CreateLocationsDto {
  total_locations: Int!
  locations: [CreateLocationDto!]!
}

type CreatePostDto {
  _id: String!
  editor: String!
  type_material: String!
  cover: String!
  title: String!
  link: String!
  tags: [String!]!
  work_time: String!
  region: String!
  how_to_get_there: String!
  views: Int!
  likes: [String!]!
  confirmed: Boolean!
  confirm_hash: String!
  small_text: String!
  last_seen: DateTime
  createdAt: DateTime!
  author: CreateUserDto
  location: CreateLocationDto!
}

type CreatePostsDto {
  page: Int!
  total_pages: Int!
  total_posts: Int!
  posts: [CreatePostDto!]!
}

type CreateTokenDto {
  userId: ID
  refreshToken: String!
}

type TripValue {
  distance: Float!
  travel_time: Float!
  waypoints: Float!
}

type Obj {
  text: String!
  value: Float!
}

type Legs {
  distance: Obj!
  duration: Obj!
}

type Location {
  lat: Float!
  lng: Float!
}

type Waypoints {
  latLng: Location!
  location: CreateLocationDto
}

type CreateTripDto {
  _id: String!
  cover: String!
  title: String!
  travelMode: [String!]!
  link: String!
  legs: [Legs!]!
  tags: [String!]!
  isType: String!
  views: Int!
  likes: [String!]!
  small_text: String!
  trip_value: TripValue!
  waypoints: [Waypoints!]!
  last_seen: DateTime
  createdAt: DateTime!
  author: CreateUserDto
}

type CreateTripsDto {
  page: Int!
  total_pages: Int!
  total_trips: Int!
  trips: [CreateTripDto!]!
}

type CreateUploadDto {
  _id: String!
  name: String!
  url: String!
  createdAt: DateTime!
  author: CreateUserDto
}

type Query {
  comments(postId: String!): [CreateCommentDto!]!
  locationsAndTP(input: ParamsLocationInput!): CreateLocationsDto!
  location(locationID: String!): CreateLocationDto!
  postsAndParams(input: ParamsPostInput!): CreatePostsDto!
  posts(input: ParamsPostInput!): [CreatePostDto!]!
  post(postID: String!): CreatePostDto!
  tripsAndParams(input: ParamsTripInput!): CreateTripsDto!
  trips(input: ParamsTripInput!): [CreateTripDto!]!
  trip(tripID: String!): CreateTripDto!
  cover(fileID: String!): CreateUploadDto!
  users: [CreateUserDto!]!
  user(userID: String!): CreateUserDto!
  author(_id: String!): CreateUserDto!
  activate(activationLink: String!): CreateUserDataDto!
  login(input: LoginUserInput!): CreateUserDataDto!
  logout(refreshToken: String!): CreateUserDataDto!
  refresh(refreshToken: String!): CreateUserDataDto!
}

input ParamsLocationInput {
  types: [String!]!
  region: String!
  debounced: [[Float!]!]!
}

input ParamsPostInput {
  limit: Int!
  page: Int!
}

input ParamsTripInput {
  limit: Int!
  page: Int!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  createComment(input: CommentInput!): CreateCommentDto!
  addedCommentAnswer(input: AnswerCommentInput!): CreateCommentDto!
  createLocation(input: CreateLocationInput!): CreateLocationDto!
  updateLinkToPost(input: UpdateLinkToPostInput!): CreateLocationDto!
  createPost(input: CreatePostInput!): CreatePostDto!
  setLikeForPost(input: LikeInput!): CreatePostDto!
  createToken(input: TokenInput!): CreateTokenDto!
  setLikeForTrip(input: String!): CreateTripDto!
  registration(input: RegistrationUserInput!): CreateUserDataDto!
  updateUser(input: UpdateUserInput!): CreateUserDataDto!
  updateUserAvatar(input: UpdateUserAvatarInput!): CreateUserDataDto!
}

input CommentInput {
  postId: String!
  comment: String!
  token: String!
}

input AnswerCommentInput {
  id: ID!
  comment: String!
  token: String!
}

input CreateLocationInput {
  title: String!
  small_text: String!
  isType: String!
  address: String!
  region: String!
  cover: String!
  isTicket: Boolean!
  tickets: [String!]!
  latitude: Float!
  longitude: Float!
  token: String!
}

input UpdateLinkToPostInput {
  locationID: String!
  linkToPost: String!
}

input CreatePostInput {
  title: String!
  small_text: String!
  region: String!
  cover: String!
  token: String!
  tags: [String!]!
  type_material: String!
  location: String!
  editor: String!
  link: String!
  work_time: String!
  how_to_get_there: String!
}

input LikeInput {
  postId: String!
  token: String!
}

input TokenInput {
  userId: ID!
  refreshToken: String!
}

input RegistrationUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  token: String!
  name: String!
  aboutMy: String!
  socials: Socialss!
}

input Socialss {
  facebook: String
  instagram: String
  twitter: String
  youtube: String
  telegram: String
}

input UpdateUserAvatarInput {
  token: String!
  avatar: String!
}